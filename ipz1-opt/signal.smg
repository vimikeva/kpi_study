<signal-program> --> <program>
<program> --> PROGRAM <procedure-identifier> ; <block>. |
              PROCEDURE <procedure-identifier> <parameters-list> ; <block> ;
<block> --> <declarations> BEGIN <statements-list> END
<declarations> --> <constant-declarations>
                   <variable-declarations>
                   <math-function-declarations>
                   <procedure-declarations>
<constant-declarations> --> CONST <constant-declarations-list> | <empty>
<constant-declarations-list> --> <constant-declaration> <constant-declarations-list> | <empty>
<constant-declaration> --> <constant-identifier> = <constant> ;
<constant> --> <complex-constant> |
               <unsigned-constant> | 
               - <unsigned-constant>
<variable-declarations> --> VAR <declarations-list> | <empty>
<declarations-list> --> <declaration> <declarations-list> | <empty>
<declaration> --> <variable-identifier> <identifiers-list> : <attribute> <attributes-list> ;
<identifiers-list> --> , <variable-identifier> <identifiers-list> | <empty>
<attributes-list> --> <attribute> <attributes-list> | <empty>
<attribute> --> COMPLEX | INTEGER | FLOAT | BLOCKFLOAT | EXT
<math-function-declarations> --> DEFFUNC <function-list> | <empty>
<function-list> --> <function> <function-list> | <empty>
<function> --> <function-identifier> = <expression> <function-characteristic> ;
<function-characteristic> --> \ <unsigned-integer>,<unsigned-integer>
<procedure-declarations> --> <procedure> <procedure-declarations> | <empty>
<procedure> --> PROCEDURE <procedure-identifier> <parameters-list> ;
<parameters-list> --> ( <declarations-list> ) | <empty>
<statements-list> --> <statement> <statements-list> | <empty>
<statement> --> <variable> := <expression> ; |
                <procedure-identifier> <actual-arguments> ; |
                <condition-statement> ENDIF ; |
                WHILE <conditional-expression> DO <statements-list> ENDWHILE ; |
                LOOP <statements-list> ENDLOOP ; |
                FOR <variable-identifier> := <loop-declaration> ENDFOR ; |
                CASE <expression> OF <alternatives-list> ENDCASE ; |
                RETURN ; |
                ; |
                ($ <assembly-insert-file-identifier> $)
<condition-statement> --> <incomplete-condition-statement> <alternative-part>
<incomplete-condition-statement> --> IF <conditional-expression> THEN <statements-list>
<alternative-part> --> ELSE <statements-list> | <empty>
<loop-declaration> --> <expression> TO <expression> DO <statements-list>
<actual-arguments> --> ( <expression> <actual-arguments-list> ) | <empty>
<actual-arguments-list> --> ,<expression> <actual-arguments-list> | <empty>
<alternatives-list> --> <alternative> <alternatives-list> | <empty>
<alternative> --> <expression> : / <statements-list> \
<conditional-expression> --> <logical-summand> <logical>
<logical> --> OR <logical-summand> <logical> | <empty>
<logical-summand> --> <logical-multiplier> <logical-multipliers-list>
<logical-multipliers-list> --> AND <logical-multiplier> <logical-multipliers-list> | <empty>
<logical-multiplier> --> [ <conditional-expression> ] | NOT <logical-multiplier> | <expression> <comparison-operator> <expression>
<comparison-operator> --> < | <= | = | <> | >= | >
<expression> --> - <summand> <summands-list> | <summand> <summands-list>
<summands-list> --> <add-instruction> <summand> <summands-list> | <empty>
<add-instruction> --> + | - | !
<summand> --> <multiplier> <multipliers-list>
<multipliers-list> --> <multiplication-instruction> <multiplier> <multipliers-list> | <empty>
<multiplication-instruction> --> * | / | & | MOD
<multiplier> --> <unsigned-constant> |
                 <complex-constant> |
                 <constant-identifier> |
                 <variable> |
                 <function-identifier> |
                 <builtin-function-identifier> <actual-arguments> |
                 ( <expression> ) |
                 - <multiplier> |
                 ^ <multiplier>
<variable> --> <variable-identifier> <dimension> | <complex-variable>
<complex-variable> --> "<complex-number>"
<dimension> --> [ <expression> <expressions-list> ] | <empty>
<expressions-list> --> ,<expression> <expressions-list> | <empty>
<complex-constant> --> '<complex-number>'
<unsigned-constant> --> <unsigned-number>
<complex-number> --> <left-part> <right-part>
<left-part> --> <expression> | <empty>
<right-part> --> ,<expression> | $EXP( <expression> ) | <empty>
<constant-identifier> --> <identifier>
<variable-identifier> --> <identifier>
<procedure-identifier> --> <identifier>
<function-identifier> --> <identifier>
<builtin-function-identifier> --> <identifier>
<assembly-insert-file-identifier> --> <identifier>
<identifier> --> <letter><string>
<string> --> <letter><string> |
             <digit><string> |
             <empty>
<unsigned-number> --> <integer-part> <fractional-part>
<integer-part> --> <unsigned-integer>
<fractional-part> --> # <sign> <unsigned-integer> | <empty>
<unsigned-integer> --> <digit><digits-string>
<digits-string> --> <digit><digits-string> | <empty>
<sign> --> + | - | <empty>
<digit> --> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<letter> --> A | B | C | D | E | F | G | H | I | J | K | L | M |
             N | O | P | Q | R | S | T | V | U | W | X | Y | Z
